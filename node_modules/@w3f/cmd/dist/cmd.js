"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer");
const child_process_1 = require("child_process");
class Cmd {
    constructor(logger, options) {
        this.logger = logger;
        this.options = options;
    }
    setOptions(options) {
        this.options = options;
    }
    exec(...items) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const child = child_process_1.spawn(items[0], items.slice(1), this.options);
                if (this.options.detached) {
                    child.unref();
                    resolve(child.pid);
                    return;
                }
                let match = false;
                let output = buffer_1.Buffer.from('');
                child.stdout.on('data', (data) => {
                    if (this.options.matcher && this.options.matcher.test(data)) {
                        match = true;
                        child.kill('SIGTERM');
                        resolve();
                        return;
                    }
                    output = buffer_1.Buffer.concat([output, data]);
                    if (this.options.verbose) {
                        this.logger.info(data.toString());
                    }
                });
                child.stderr.on('data', (data) => {
                    output = buffer_1.Buffer.concat([output, data]);
                    if (this.options.verbose) {
                        this.logger.info(data.toString());
                    }
                });
                child.on('close', (code) => {
                    if (code !== 0 && !match) {
                        this.logger.info(`ERROR: Command execution failed with code: ${code}`);
                        reject(new Error(`code: ${code}`));
                    }
                    else {
                        resolve(output.toString());
                    }
                });
            });
        });
    }
}
exports.Cmd = Cmd;
